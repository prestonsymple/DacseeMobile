// @flow
import React from 'react'
import PushNotification from 'react-native-push-notification'
// import PropTypes from 'prop-types'
// import lodash from 'lodash'

import Settings from './settings'
import SettingAboutScreen from './setting.about'
import SettingFeedbackScreen from './setting.feedback'
import SettingHelpCenterScreen from './setting.help.center'
import SettingWetViewScreen from './setting.web.view'


import {
  account, application
} from '../../redux/actions'


const localPN = () => {
  // PushNotification.localNotification({
  //   /* Android Only Properties */
  //   // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
  //   ticker: 'My Notification Ticker', // (optional)
  //   autoCancel: true, // (optional) default: true
  //   largeIcon: 'ic_launcher', // (optional) default: 'ic_launcher'
  //   smallIcon: 'ic_notification', // (optional) default: 'ic_notification' with fallback for 'ic_launcher'
  //   bigText: 'My big text that will be shown when notification is expanded', // (optional) default: 'message' prop
  //   subText: 'This is a subText', // (optional) default: none
  //   color: 'red', // (optional) default: system default
  //   vibrate: true, // (optional) default: true
  //   vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
  //   tag: 'some_tag', // (optional) add tag to message
  //   group: 'group', // (optional) add group to message
  //   ongoing: false, // (optional) set whether this is an "ongoing" notification

  //   /* iOS only properties */
  //   // alertAction: // (optional) default: view
  //   // category: // (optional) default: null
  //   // userInfo: // (optional) default: null (object containing additional notification data)

  //   /* iOS and Android properties */
  //   date: new Date(Date.now() + (20 * 1000)),
  //   title: 'My Notification Title', // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
  //   message: 'My Notification Message', // (required)
  //   playSound: true, // (optional) default: true
  //   soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
  //   number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
  //   repeatType: 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
  //   actions: '[\'Yes\', \'No\']',  // (Android only) See the doc for notification actions to know more
  // })
}

const createTemplate = (title: string, producer, navigationOptions?: Object) => {
  const clone = React.createFactory(Settings)
  clone.defaultProps = { producer }
  clone.navigationOptions = () => {
    return Object.assign({}, {
      drawerLockMode: 'locked-closed', title
    }, navigationOptions)
  }
  return clone
}

// 主菜单
const SettingMenuScreen = createTemplate('设置', ({ navigation, dispatch }) => [
  [{
    title: '账号与安全', type: 'text', onPress: () => navigation.navigate('SettingAccount')
  }],
  [{
    title: '新消息通知', type: 'text', onPress: () => navigation.navigate('SettingMessageNotification')
  }, {
    title: '本地通知测试', type: 'text', onPress: () => localPN()
  }, {
    title: '语言和地区', type: 'text', onPress: () => navigation.navigate('SettingLanguageRegion')
  }],
  [{
    title: '意见反馈', type: 'text', onPress: async () => navigation.navigate('SettingFeedback')
  }, {
    title: '帮助中心', type: 'text', onPress: () => navigation.navigate('SettingHelpCenter')
  }, {
    title: '关于', type: 'text', onPress: () => navigation.navigate('SettingAbout')
  }],
  [{
    title: '切换账号', type: 'button', onPress: () => dispatch(account.logoutSuccess())
  }]
])


// 账号与安全
const SettingAccountScreen = createTemplate('账号与安全', ({ navigation, dispatch, user }) => ([
  [{
    title: '账号', type: 'text', value: user.userId, editable: false
  },{
    title: '手机号', type: 'text', value: `(${user.phoneCountryCode})${user.phoneNo}`, onPress: () => dispatch(application.showMessage('暂不支持手机号修改'))
  }, {
    title: '邮箱账号', type: 'text', value: user.email || '尚未绑定', onPress: () => dispatch(application.showMessage('暂不支持邮箱修改'))
  }], [{
    title: '绑定至微信', type: '', value: '', onPress: () => { this.props }
  },{
    title: '绑定至微博', type: 'text', value: '', onPress: () => {}
  }, {
    title: '绑定至QQ', type: 'text', value: '', onPress: () => {}
  }]
]))

// 新消息通知
const SettingMessageNotificationScreen = createTemplate('新消息通知', () => ([
  [{
    title: '允许推送消息', type: 'switch', value: false, editable: false, onPress: () => {}
  }]
]))

// 语言和地区
const SettingLanguageRegionScreen = createTemplate('语言和地区', () => ([
  [{
    title: '语言', type: 'text', value: '中文(简体)', editable: true, onPress: () => {}
  }, {
    title: '地区', type: 'text', value: '中国大陆', editable: true, onPress: () => {}
  }]
]))

export {
  SettingMenuScreen,
  SettingAboutScreen,
  SettingAccountScreen,
  SettingMessageNotificationScreen,
  SettingLanguageRegionScreen,
  SettingFeedbackScreen,
  SettingHelpCenterScreen,
  SettingWetViewScreen
}